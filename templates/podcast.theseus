/// <reference types="node" />
/// <reference types="jquery" />
/// <reference types="react" />


function removePodcast(name : string) {
   var xmlhttp = new XMLHttpRequest();
   xmlhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
         window.open("@{HomeR}","_self");
      }
   };
   var params = "?name=" + name;
   xmlhttp.open("POST", "@{RemovePodcastR}" + params);
   xmlhttp.send(null);
}


function markAsRead(ids : string[], callback: () => void) {
   var xmlhttp = new XMLHttpRequest();
   xmlhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
         callback();
      }
   };
   var params = "?ids=" + ids;
   xmlhttp.open("POST", "@{ReadEpisodesR}" + params);
   xmlhttp.send(null);
}


function markAsUnread(ids : string[], callback: () => void) {
   var xmlhttp = new XMLHttpRequest();
   xmlhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
         callback();
      }
   };
   var params = "?ids=" + ids;
   xmlhttp.open("POST", "@{UnreadEpisodesR}" + params);
   xmlhttp.send(null);
}


interface EpisodeData {
   id: string
   title: string
   url: string
   isRead: boolean
}


interface EpisodeProperties {
   data: EpisodeData
   isSelected: boolean
   handleSelection: (boolean, string) => void
   setCurrentEpisode: (EpisodeData) => void
   isCurrentEpisode: boolean
}

class Episode extends React.Component<EpisodeProperties, {}> {
   constructor(props) {
      super(props);

      this.handleInputChange = this.handleInputChange.bind(this);
   }

   handleInputChange() {
      this.props.handleSelection(!this.props.isSelected, this.props.data.id);
   }

   render() {
      const id = this.props.data.id;
      const title = this.props.data.title;
      const url = this.props.data.url;
      var episodeStyle = "episode";

      if (this.props.isSelected) {
         episodeStyle = "selected-episode " + episodeStyle
      } else {
         episodeStyle = "non-selected-episode " + episodeStyle
      }

      if (this.props.isCurrentEpisode) {
         episodeStyle = "current-episode " + episodeStyle
      }

      let readmark = "@{HomeR}/static/img/book.svg";
      if (!this.props.data.isRead) {
         readmark = "@{HomeR}/static/img/book-open.svg";
      }

      return (
         <div className={episodeStyle}
              onDoubleClick={() => this.props.setCurrentEpisode(this.props.data)}
              onClick={() => this.handleInputChange()}>
            {title}
            <input type="image" src={readmark} />
         </div>
      );
   }
}


enum ReaderAction {
   Play,
   Pause,
}


interface ReaderProperties {
   currentEpisode: EpisodeData
   readOnEnd: (string) => void
   readerAction: ReaderAction
   toggleReaderAction: () => void
}

interface ReaderState {
   currentTime: number
   totalDuration: number
   isDragging: boolean
}

class Reader extends React.Component<ReaderProperties, ReaderState> {
   constructor(props) {
      super(props);
      this.state = { currentTime: 0,
                     totalDuration: NaN,
                     isDragging: false};

      this.updateReaderTime = this.updateReaderTime.bind(this);
      this.applyReaderTime = this.applyReaderTime.bind(this);
      this.setDragging = this.setDragging.bind(this);
   }

   updateReaderTime() {
      if (!this.state.isDragging) {
         var audio = $("#podcast-reader")[0] as HTMLAudioElement;
         this.setState({ currentTime: Math.floor(audio.currentTime),
                         totalDuration: Math.floor(audio.duration) });
      }
   }

   setDragging(event){
      this.setState({ currentTime: event.target.value,
                      isDragging: true});
   }

   applyReaderTime(event) {
      var audio = $("#podcast-reader")[0] as HTMLAudioElement;
      this.setState({ currentTime: event.target.value,
                      isDragging: false });
      audio.currentTime = this.state.currentTime;
   }

   render() {
      let img = "@{HomeR}/static/img/play-circle.svg";
      const id = this.props.currentEpisode.id;
      const url = this.props.currentEpisode.url;
      if (this.props.readerAction === ReaderAction.Play) {
         img = "@{HomeR}/static/img/pause-circle.svg";
      }

      return (
         <div id="reader">
               {this.props.currentEpisode.title}
               <input type="range" value={this.state.currentTime}
                      min={0}
                      max={this.state.totalDuration}
                      onChange={this.applyReaderTime}
                      onInput={this.setDragging}
                      />
               <audio id="podcast-reader"
                      onEnded={() => {markAsRead([id], () => {this.props.readOnEnd(id)})}}
                      onTimeUpdate={this.updateReaderTime}>
                  <source src={url}/>
                  <a href={url}> {url} </a>
               </audio>
               {Math.floor(this.state.currentTime)}/{Math.floor(this.state.totalDuration)}
               <input onClick={this.props.toggleReaderAction} type="image" src={img} />
         </div>
      );
   }
}


interface SelectAllProperties {
   selectAll: () => void
}

class SelectAll extends React.Component<SelectAllProperties, {}> {
   render() {
      return (
         <input onClick={this.props.selectAll} type="image" src= "@{HomeR}/static/img/list.svg" />
      );
   }
}


interface TouchProperties {
   touchSelected: (boolean) => void
}


class Read extends React.Component<TouchProperties, {}> {
   render() {
      return (
         <input onClick={() => {this.props.touchSelected(true)}} type="image" src= "@{HomeR}/static/img/book.svg" />
      );
   }
}


class Unread extends React.Component<TouchProperties, {}> {
   render() {
      return (
         <input onClick={() => {this.props.touchSelected(false)}} type="image" src= "@{HomeR}/static/img/book-open.svg" />
      );
   }
}


class Remove extends React.Component<{}, {}> {
   render() {
      return (
         <input onClick={() => {removePodcast("#{name}")}} type="image" src= "@{HomeR}/static/img/trash-2.svg" />
      );
   }
}


interface CollectionProperties {
   readEpisodes: {[k: string]: boolean}
   selectedEpisodes: {[k: string]: boolean}
   episodes: EpisodeData[]
   handleSelection: (boolean, string) => void
   setCurrentEpisode: (EpisodeData) => void
   currentEpisode: EpisodeData
}


class EpisodeCollection extends React.Component<CollectionProperties, {}> {
   render() {
      const episodes = [];

      this.props.episodes.forEach((episode) => {
         var nEpisode = episode;
         nEpisode.isRead = this.props.readEpisodes[episode.id];
         episodes.push(
            <Episode
               data = {nEpisode}
               isSelected = {this.props.selectedEpisodes[episode.id]}
               handleSelection = {this.props.handleSelection}
               setCurrentEpisode = {this.props.setCurrentEpisode}
               isCurrentEpisode = {this.props.currentEpisode.id === episode.id}
            />
         );
      });

      return (
         <div>
            {episodes}
         </div>
      );
   }
}


interface ActionBarProperties
extends ReaderProperties, TouchProperties, SelectAllProperties {}


class ActionBar extends React.Component<ActionBarProperties, {}> {
   render() {
      return (
         <div className="action-bar">
            <Reader readOnEnd={this.props.readOnEnd}
                    currentEpisode={this.props.currentEpisode}
                    toggleReaderAction={this.props.toggleReaderAction}
                    readerAction={this.props.readerAction}
                    />
            <SelectAll selectAll={this.props.selectAll} />
            <Read touchSelected={this.props.touchSelected} />
            <Unread touchSelected={this.props.touchSelected} />
            <Remove />
         </div>
      );
   }
}


interface PodcastProperties {
   episodes: EpisodeData[]
}

interface PodcastState {
   readEpisodes: {[k: string]: boolean};
   selectedEpisodes: {[k: string]: boolean};
   currentEpisode: EpisodeData;
   readerAction: ReaderAction;
}

class Podcast extends React.Component<PodcastProperties, PodcastState> {
   constructor(props) {
      super(props);
      var readEpisodes = {};
      var currentEpisode = null;

      this.props.episodes.forEach((episode) => {
         if (currentEpisode === null && !episode.isRead) {
            currentEpisode = episode;
         }

         readEpisodes[episode.id] = episode.isRead;
      });

      this.state = { readEpisodes: readEpisodes,
                     selectedEpisodes: {},
                     readerAction: ReaderAction.Pause,
                     currentEpisode: currentEpisode};

      this.selectAll = this.selectAll.bind(this);
      this.readOnEnd = this.readOnEnd.bind(this);
      this.touchEpisodes = this.touchEpisodes.bind(this);
      this.touchSelected = this.touchSelected.bind(this);
      this.handleSelection = this.handleSelection.bind(this);
      this.setCurrentEpisode = this.setCurrentEpisode.bind(this);
      this.toggleReaderAction = this.toggleReaderAction.bind(this);
   }

   //Change whether an episode is read
   touchEpisodes(b:boolean, ids:string[]) {
      var episodes = this.state.readEpisodes;

      ids.forEach((id) => {
         episodes[id] = b;
      });
      var local = this;

      if (b) {
         markAsRead(ids, () => {local.setState({readEpisodes: episodes});});
      } else {
         markAsUnread(ids, () => {local.setState({readEpisodes: episodes});});
      }
   }

   readOnEnd(id){
      this.setState({readerAction: ReaderAction.Pause});
      this.touchEpisodes(true, [id]);
   }

   //Change whether the selected episodes are read
   touchSelected(b:boolean) {
      var ids = [];
      Object.keys(this.state.selectedEpisodes).forEach(function(key, index) {
         if (this[key]) {
            ids.push(key);
         }
      }, this.state.selectedEpisodes);

      this.touchEpisodes(b, ids);

      this.setState({selectedEpisodes: {}})
   }

   //Change whether an episode is selected
   handleSelection(b:boolean, id:string) {
      var selected = this.state.selectedEpisodes
      selected[id] = b;

      this.setState({selectedEpisodes: selected});
   }

   selectAll() {
      var local = this;
      this.props.episodes.forEach((episode) => {
         local.handleSelection(true, episode.id)
      });
   }

   setCurrentEpisode(episode: EpisodeData) {
      this.setState({currentEpisode: episode,
                     readerAction: ReaderAction.Pause});
      var audio = $("#podcast-reader")[0] as HTMLAudioElement;
      audio.load();
   }

   toggleReaderAction() {
      var audio = $("#podcast-reader")[0] as HTMLAudioElement;
      if(audio.paused){
         audio.play();
         this.setState({readerAction: ReaderAction.Play});
      } else {
         audio.pause();
         this.setState({readerAction: ReaderAction.Pause});
      }
   }

   render() {
      return (
         <div>
            <ActionBar
               readOnEnd={this.readOnEnd}
               currentEpisode={this.state.currentEpisode}
               toggleReaderAction={this.toggleReaderAction}
               readerAction={this.state.readerAction}
               selectAll={this.selectAll}
               touchSelected={this.touchSelected}
            />
            <EpisodeCollection
               selectedEpisodes={this.state.selectedEpisodes}
               readEpisodes={this.state.readEpisodes}
               episodes={this.props.episodes}
               handleSelection={this.handleSelection}
               setCurrentEpisode={this.setCurrentEpisode}
               currentEpisode={this.state.currentEpisode}
            />
         </div>
      );
   }
}


$.getJSON('@{EpisodesR podName}', function (data) {
   ReactDOM.render(
      <Podcast episodes={data} />,
      document.getElementById("container")
   );
});
