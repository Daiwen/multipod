/// <reference types="node" />
/// <reference types="jquery" />
/// <reference types="react" />

declare function appLayout(App, Action);

interface PodcastProperties {
   name: string;
   address: string;
}

class Podcast extends React.Component<PodcastProperties, {}> {
   render() {
      const name = this.props.name;
      const address = this.props.address;
      return (
         <a className="podcast-link" href= {address}>
            <div className="podcast-item">
               {name}
            </div>
         </a>
      );
   }
}

interface TextInputProperties {
   value: string;
   setValue: (string) => void;
}

class TextInput extends React.Component<TextInputProperties, {}> {
   constructor(props) {
      super(props);

      this.handleChange = this.handleChange.bind(this);
   }

   handleChange(event) {
      this.props.setValue(event.target.value);
   }

   render() {
      return (
         <input type="text" value={this.props.value} onChange={this.handleChange} />
      );
   }
}

interface AddPodcastAction {
   onAddPodcast: () => void;
}

interface AddPodcastProperties extends AddPodcastAction {
   value: string;
   resetTextInput: () => void;
}

class AddPodcast extends React.Component<AddPodcastProperties, {}> {
   constructor(props) {
      super(props);

      this.handleAdd = this.handleAdd.bind(this);
   }

   handleAdd() {
      var props = this.props;
      var address = props.value;
      var xmlhttp = new XMLHttpRequest();

      xmlhttp.onreadystatechange = function() {
         if (this.readyState == 4 && this.status == 200) {
            props.onAddPodcast();
            $("#podcasts").load("@{HomeR} #podcast-list");
         }
      };
      var params = "?address=" + address;
      xmlhttp.open("POST", "@{AddPodcastR}" + params);
      xmlhttp.send(null);
      props.resetTextInput();
   }

   render() {
      return (
         <input onClick={this.handleAdd} type="image" src="@{HomeR}/static/img/plus-circle.svg" />
      );
   }
}

class RefreshPodcast extends React.Component<{}, {}> {
   constructor(props) {
      super(props);

      this.handleUpdate = this.handleUpdate.bind(this);
   }

   handleUpdate() {
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.open("PUT", "@{UpdatePodcastsR}");
      xmlhttp.send(null);
   }

   render() {
      return (
         <input id="update" onClick={this.handleUpdate} type="image" src= "@{HomeR}/static/img/rotate-cw.svg" />
      );
   }
}

interface PodcatcherState {
   podcasts: PodcastProperties[];
}

interface CollectionProperties {
   appProperties: PodcatcherState;
}

class PodcastCollection extends React.Component<CollectionProperties, {}> {
   render() {
      const podcasts = [];

      this.props.appProperties.podcasts.forEach((podcast) => {
         podcasts.push(
            <Podcast
               address = {podcast.address}
               name = {podcast.name} />
         );
      });

      return (
         <div className="container podcast-collection">
            {podcasts}
         </div>
      );
   }
}

interface ActionProperties {
   data: AddPodcastAction;
}

interface ActionBarState {
   value: string;
}

class ActionBar extends React.Component<ActionProperties, ActionBarState> {
   constructor(props) {
      super(props);

      this.state = {value: ""};

      this.setValue = this.setValue.bind(this);
      this.resetTextInput = this.resetTextInput.bind(this);
   }

   setValue(v) {
      this.setState({value: v});
   }

   resetTextInput() {
      this.setState({value: ""});
   }

   render() {
      return (
         <div className="action-bar">
            <TextInput
               value={this.state.value}
               setValue={this.setValue} />
            <AddPodcast
               value={this.state.value}
               onAddPodcast={this.props.data.onAddPodcast}
               resetTextInput={this.resetTextInput} />
            <RefreshPodcast />
         </div>
      );
   }
}

var AppLayout = appLayout(PodcastCollection, ActionBar);

var App = class extends React.Component<{}, PodcatcherState> {
   constructor(props) {
      super(props);
      var local = this;
      this.state = {podcasts: []};


      $.getJSON('@{PodcastsR}', function (data) {
          local.setState({podcasts: data});
      });


      this.handleAddPodcast = this.handleAddPodcast.bind(this);
   }

   handleAddPodcast () {
      var npodcasts = [];
      var local = this;

      $.getJSON('@{PodcastsR}', function (data) {
         local.setState({podcasts: data});
      });
   }

   render () {
      return (
         <div>
            <AppLayout
               actionProperties={{onAddPodcast: this.handleAddPodcast}}
               appProperties={{podcasts: this.state.podcasts}}
               />
         </div>
      );
   }
}
